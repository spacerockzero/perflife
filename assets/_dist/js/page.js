(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/jakob/dev/projects/sabbat/perflife/assets/js/page/index.js":[function(require,module,exports){
"use strict";function updatePage(e){var t;photoIDsDisplayed?(t=photosEl.scrollHeight,e=e.filter(function(e){return-1==photoIDsDisplayed.indexOf(e.id)?(photoIDsDisplayed.push(e.id),!0):!1}),photosEl.insertBefore(utils.strToEls(photosTemplate(e)),photosEl.firstChild),photosEl.scrollTop+=photosEl.scrollHeight-t):(photoIDsDisplayed=e.map(function(e){return e.id}),photosEl.insertBefore(utils.strToEls(photosTemplate(e)),photosEl.firstChild))}function getFakeData(){return photos.search(searchTerm,{headers:{}})["catch"](function(){return null})}function getCachedFakeData(){return"serviceWorker"in navigator&&navigator.serviceWorker.controller?photos.search(searchTerm,{headers:{"x-use-cache-only":"1"}})["catch"](function(){return null}):Promise.resolve(null)}function showMessage(e,t){msgContentEl.textContent=e,msgEl.style.display="block",msgEl.offsetWidth,msgEl.classList.add("show"),setTimeout(function(){msgEl.classList.remove("show")},t)}function showConnectionError(){showMessage("Currently offline!",5e3)}window.Promise=window.Promise||require("es6-promise").Promise,require("whatwg-fetch");var photos=require("./photos"),photosTemplate=require("./views/photos.hbs"),utils=require("./utils"),photosEl=document.querySelector(".photos"),searchTerm="photos",msgEl=document.querySelector(".msg-container"),msgContentEl=document.querySelector(".msg"),photoIDsDisplayed=null;location.port&&"80"!=location.port||"https:"==location.protocol||(location.protocol="https:"),"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(function(e){console.log("◕‿◕ ServiceWorker registration success!",e)})["catch"](function(e){console.log("ಠ_ಠ ServiceWorker registration failed: ",e)});var liveDataFetched=getFakeData().then(function(e){if(!e)return!1;var t=!!photoIDsDisplayed,o=photoIDsDisplayed&&photoIDsDisplayed.length;return updatePage(e),t&&o!=photoIDsDisplayed.length&&showMessage("▲ New photos ▲",3e3),!0}),cachedDataFetched=getCachedFakeData().then(function(e){return e?(photoIDsDisplayed||updatePage(e),!0):!1});liveDataFetched.then(function(e){return e||cachedDataFetched}).then(function(e){e||showConnectionError()}),document.addEventListener("load",function(e){e.target.classList.contains("main-photo-img")&&e.target.parentNode.classList.add("loaded")},!0);

},{"./photos":"/Users/jakob/dev/projects/sabbat/perflife/assets/js/page/photos.js","./utils":"/Users/jakob/dev/projects/sabbat/perflife/assets/js/page/utils.js","./views/photos.hbs":"/Users/jakob/dev/projects/sabbat/perflife/assets/js/page/views/photos.hbs","es6-promise":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/es6-promise/dist/es6-promise.js","whatwg-fetch":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/whatwg-fetch/fetch.js"}],"/Users/jakob/dev/projects/sabbat/perflife/assets/js/page/photos.js":[function(require,module,exports){
"use strict";function search(r){return fetch(root+"/"+r).then(function(r){return r.json()}).then(function(r){if("fail"===r.stat)throw Error(r.err.msg);return r})}var root="/api";module.exports.search=search;

},{}],"/Users/jakob/dev/projects/sabbat/perflife/assets/js/page/utils.js":[function(require,module,exports){
function defaults(r,e){var n=Object.create(e);if(!r)return n;for(var t in r)r.hasOwnProperty(t)&&(n[t]=r[t]);return n}function toQuerystring(r){var e=[];for(var n in r)r.hasOwnProperty(n)&&e.push(encodeURIComponent(n)+"="+encodeURIComponent(r[n]));return e.join("&")}var strToEls=function(){var r=document.createElement("div");return function(e){var n=document.createDocumentFragment();for(r.innerHTML=e;r.childNodes[0];)n.appendChild(r.childNodes[0]);return n}}();module.exports={defaults:defaults,toQuerystring:toQuerystring,strToEls:strToEls};

},{}],"/Users/jakob/dev/projects/sabbat/perflife/assets/js/page/views/photos.hbs":[function(require,module,exports){
var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({1:function(a,l,n,e){var t,s=l.helperMissing,r="function",i=this.escapeExpression;return'  <article class="photo">\n    <h1>\n      <a href="'+i((t=null!=(t=l.url||(null!=a?a.url:a))?t:s,typeof t===r?t.call(a,{name:"url",hash:{},data:e}):t))+'">\n        <span class="main-photo">\n          <span class="photo-fader">\n            <img src="'+i((t=null!=(t=l.thumbnailUrl||(null!=a?a.thumbnailUrl:a))?t:s,typeof t===r?t.call(a,{name:"thumbnailUrl",hash:{},data:e}):t))+'" alt="" class="main-photo-img">\n          </span>\n        </span>\n        <span class="title">'+i((t=null!=(t=l.title||(null!=a?a.title:a))?t:s,typeof t===r?t.call(a,{name:"title",hash:{},data:e}):t))+"</span>\n      </a>\n    </h1>\n  </article>\n"},compiler:[6,">= 2.0.0-beta.1"],main:function(a,l,n,e){var t;return null!=(t=l.each.call(a,a,{name:"each",hash:{},fn:this.program(1,e,0),inverse:this.noop,data:e}))?t:""},useData:!0});

},{"hbsfy/runtime":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/hbsfy/runtime.js"}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/es6-promise/dist/es6-promise.js":[function(require,module,exports){
(function (process,global){
(function(){"use strict";function t(t){return"function"==typeof t||"object"==typeof t&&null!==t}function e(t){return"function"==typeof t}function n(t){return"object"==typeof t&&null!==t}function r(t,e){V[z]=t,V[z+1]=e,z+=2,2===z&&(U?U(f):W())}function o(t){U=t}function i(){var t=process.nextTick,e=process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);return Array.isArray(e)&&"0"===e[1]&&"10"===e[2]&&(t=setImmediate),function(){t(f)}}function u(){return function(){N(f)}}function s(){var t=0,e=new J(f),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function c(){var t=new MessageChannel;return t.port1.onmessage=f,function(){t.port2.postMessage(0)}}function a(){return function(){setTimeout(f,1)}}function f(){for(var t=0;z>t;t+=2){var e=V[t],n=V[t+1];e(n),V[t]=void 0,V[t+1]=void 0}z=0}function l(){try{var t=require,e=t("vertx");return N=e.runOnLoop||e.runOnContext,u()}catch(n){return a()}}function p(){}function _(){return new TypeError("You cannot resolve a promise with itself")}function h(){return new TypeError("A promises callback cannot return that same promise.")}function d(t){try{return t.then}catch(e){return et.error=e,et}}function v(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function y(t,e,n){B(function(t){var r=!1,o=v(n,e,function(n){r||(r=!0,e!==n?g(t,n):A(t,n))},function(e){r||(r=!0,E(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,E(t,o))},t)}function m(t,e){e._state===Z?A(t,e._result):e._state===tt?E(t,e._result):j(e,void 0,function(e){g(t,e)},function(e){E(t,e)})}function b(t,n){if(n.constructor===t.constructor)m(t,n);else{var r=d(n);r===et?E(t,et.error):void 0===r?A(t,n):e(r)?y(t,n,r):A(t,n)}}function g(e,n){e===n?E(e,_()):t(n)?b(e,n):A(e,n)}function w(t){t._onerror&&t._onerror(t._result),S(t)}function A(t,e){t._state===X&&(t._result=e,t._state=Z,0!==t._subscribers.length&&B(S,t))}function E(t,e){t._state===X&&(t._state=tt,t._result=e,B(w,t))}function j(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+Z]=n,o[i+tt]=r,0===i&&t._state&&B(S,t)}function S(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r,o,i=t._result,u=0;u<e.length;u+=3)r=e[u],o=e[u+n],r?x(n,r,o,i):o(i);t._subscribers.length=0}}function T(){this.error=null}function P(t,e){try{return t(e)}catch(n){return nt.error=n,nt}}function x(t,n,r,o){var i,u,s,c,a=e(r);if(a){if(i=P(r,o),i===nt?(c=!0,u=i.error,i=null):s=!0,n===i)return void E(n,h())}else i=o,s=!0;n._state!==X||(a&&s?g(n,i):c?E(n,u):t===Z?A(n,i):t===tt&&E(n,i))}function C(t,e){try{e(function(e){g(t,e)},function(e){E(t,e)})}catch(n){E(t,n)}}function M(t,e){var n=this;n._instanceConstructor=t,n.promise=new t(p),n._validateInput(e)?(n._input=e,n.length=e.length,n._remaining=e.length,n._init(),0===n.length?A(n.promise,n._result):(n.length=n.length||0,n._enumerate(),0===n._remaining&&A(n.promise,n._result))):E(n.promise,n._validationError())}function O(t){return new rt(this,t).promise}function k(t){function e(t){g(o,t)}function n(t){E(o,t)}var r=this,o=new r(p);if(!$(t))return E(o,new TypeError("You must pass an array to race.")),o;for(var i=t.length,u=0;o._state===X&&i>u;u++)j(r.resolve(t[u]),void 0,e,n);return o}function I(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(p);return g(n,t),n}function Y(t){var e=this,n=new e(p);return E(n,t),n}function q(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function F(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function D(t){this._id=ct++,this._state=void 0,this._result=void 0,this._subscribers=[],p!==t&&(e(t)||q(),this instanceof D||F(),C(this,t))}function K(){var t;if("undefined"!=typeof global)t=global;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;(!n||"[object Promise]"!==Object.prototype.toString.call(n.resolve())||n.cast)&&(t.Promise=at)}var L;L=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var N,U,W,$=L,z=0,B=({}.toString,r),G="undefined"!=typeof window?window:void 0,H=G||{},J=H.MutationObserver||H.WebKitMutationObserver,Q="undefined"!=typeof process&&"[object process]"==={}.toString.call(process),R="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,V=new Array(1e3);W=Q?i():J?s():R?c():void 0===G&&"function"==typeof require?l():a();var X=void 0,Z=1,tt=2,et=new T,nt=new T;M.prototype._validateInput=function(t){return $(t)},M.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},M.prototype._init=function(){this._result=new Array(this.length)};var rt=M;M.prototype._enumerate=function(){for(var t=this,e=t.length,n=t.promise,r=t._input,o=0;n._state===X&&e>o;o++)t._eachEntry(r[o],o)},M.prototype._eachEntry=function(t,e){var r=this,o=r._instanceConstructor;n(t)?t.constructor===o&&t._state!==X?(t._onerror=null,r._settledAt(t._state,e,t._result)):r._willSettleAt(o.resolve(t),e):(r._remaining--,r._result[e]=t)},M.prototype._settledAt=function(t,e,n){var r=this,o=r.promise;o._state===X&&(r._remaining--,t===tt?E(o,n):r._result[e]=n),0===r._remaining&&A(o,r._result)},M.prototype._willSettleAt=function(t,e){var n=this;j(t,void 0,function(t){n._settledAt(Z,e,t)},function(t){n._settledAt(tt,e,t)})};var ot=O,it=k,ut=I,st=Y,ct=0,at=D;D.all=ot,D.race=it,D.resolve=ut,D.reject=st,D._setScheduler=o,D._asap=B,D.prototype={constructor:D,then:function(t,e){var n=this,r=n._state;if(r===Z&&!t||r===tt&&!e)return this;var o=new this.constructor(p),i=n._result;if(r){var u=arguments[r-1];B(function(){x(r,o,u,i)})}else j(n,o,t,e);return o},"catch":function(t){return this.then(null,t)}};var ft=K,lt={Promise:at,polyfill:ft};"function"==typeof define&&define.amd?define(function(){return lt}):"undefined"!=typeof module&&module.exports?module.exports=lt:"undefined"!=typeof this&&(this.ES6Promise=lt),ft()}).call(this);


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/browserify/node_modules/process/browser.js"}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars.runtime.js":[function(require,module,exports){
"use strict";function create(){var e=new base.HandlebarsEnvironment;return Utils.extend(e,base),e.SafeString=_SafeString2["default"],e.Exception=_Exception2["default"],e.Utils=Utils,e.escapeExpression=Utils.escapeExpression,e.VM=runtime,e.template=function(r){return runtime.template(r,e)},e}var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}};exports.__esModule=!0;var _import=require("./handlebars/base"),base=_interopRequireWildcard(_import),_SafeString=require("./handlebars/safe-string"),_SafeString2=_interopRequireWildcard(_SafeString),_Exception=require("./handlebars/exception"),_Exception2=_interopRequireWildcard(_Exception),_import2=require("./handlebars/utils"),Utils=_interopRequireWildcard(_import2),_import3=require("./handlebars/runtime"),runtime=_interopRequireWildcard(_import3),_noConflict=require("./handlebars/no-conflict"),_noConflict2=_interopRequireWildcard(_noConflict),inst=create();inst.create=create,_noConflict2["default"](inst),inst["default"]=inst,exports["default"]=inst,module.exports=exports["default"];

},{"./handlebars/base":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/base.js","./handlebars/exception":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/exception.js","./handlebars/no-conflict":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/no-conflict.js","./handlebars/runtime":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/runtime.js","./handlebars/safe-string":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/safe-string.js","./handlebars/utils":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/base.js":[function(require,module,exports){
"use strict";function HandlebarsEnvironment(e,t){this.helpers=e||{},this.partials=t||{},registerDefaultHelpers(this)}function registerDefaultHelpers(e){e.registerHelper("helperMissing",function(){if(1===arguments.length)return void 0;throw new _Exception2["default"]('Missing helper: "'+arguments[arguments.length-1].name+'"')}),e.registerHelper("blockHelperMissing",function(t,r){var i=r.inverse,n=r.fn;if(t===!0)return n(this);if(t===!1||null==t)return i(this);if(isArray(t))return t.length>0?(r.ids&&(r.ids=[r.name]),e.helpers.each(t,r)):i(this);if(r.data&&r.ids){var a=createFrame(r.data);a.contextPath=Utils.appendContextPath(r.data.contextPath,r.name),r={data:a}}return n(t,r)}),e.registerHelper("each",function(e,t){function r(t,r,n){l&&(l.key=t,l.index=r,l.first=0===r,l.last=!!n,o&&(l.contextPath=o+t)),s+=i(e[t],{data:l,blockParams:Utils.blockParams([e[t],t],[o+t,null])})}if(!t)throw new _Exception2["default"]("Must pass iterator to #each");var i=t.fn,n=t.inverse,a=0,s="",l=void 0,o=void 0;if(t.data&&t.ids&&(o=Utils.appendContextPath(t.data.contextPath,t.ids[0])+"."),isFunction(e)&&(e=e.call(this)),t.data&&(l=createFrame(t.data)),e&&"object"==typeof e)if(isArray(e))for(var c=e.length;c>a;a++)r(a,a,a===e.length-1);else{var p=void 0;for(var u in e)e.hasOwnProperty(u)&&(p&&r(p,a-1),p=u,a++);p&&r(p,a-1,!0)}return 0===a&&(s=n(this)),s}),e.registerHelper("if",function(e,t){return isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||Utils.isEmpty(e)?t.inverse(this):t.fn(this)}),e.registerHelper("unless",function(t,r){return e.helpers["if"].call(this,t,{fn:r.inverse,inverse:r.fn,hash:r.hash})}),e.registerHelper("with",function(e,t){isFunction(e)&&(e=e.call(this));var r=t.fn;if(Utils.isEmpty(e))return t.inverse(this);if(t.data&&t.ids){var i=createFrame(t.data);i.contextPath=Utils.appendContextPath(t.data.contextPath,t.ids[0]),t={data:i}}return r(e,t)}),e.registerHelper("log",function(t,r){var i=r.data&&null!=r.data.level?parseInt(r.data.level,10):1;e.log(i,t)}),e.registerHelper("lookup",function(e,t){return e&&e[t]})}function createFrame(e){var t=Utils.extend({},e);return t._parent=e,t}var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}};exports.__esModule=!0,exports.HandlebarsEnvironment=HandlebarsEnvironment,exports.createFrame=createFrame;var _import=require("./utils"),Utils=_interopRequireWildcard(_import),_Exception=require("./exception"),_Exception2=_interopRequireWildcard(_Exception),VERSION="3.0.1";exports.VERSION=VERSION;var COMPILER_REVISION=6;exports.COMPILER_REVISION=COMPILER_REVISION;var REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1"};exports.REVISION_CHANGES=REVISION_CHANGES;var isArray=Utils.isArray,isFunction=Utils.isFunction,toString=Utils.toString,objectType="[object Object]";HandlebarsEnvironment.prototype={constructor:HandlebarsEnvironment,logger:logger,log:log,registerHelper:function(e,t){if(toString.call(e)===objectType){if(t)throw new _Exception2["default"]("Arg not supported with multiple helpers");Utils.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(toString.call(e)===objectType)Utils.extend(this.partials,e);else{if("undefined"==typeof t)throw new _Exception2["default"]("Attempting to register a partial as undefined");this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]}};var logger={methodMap:{0:"debug",1:"info",2:"warn",3:"error"},DEBUG:0,INFO:1,WARN:2,ERROR:3,level:1,log:function(e,t){if("undefined"!=typeof console&&logger.level<=e){var r=logger.methodMap[e];(console[r]||console.log).call(console,t)}}};exports.logger=logger;var log=logger.log;exports.log=log;

},{"./exception":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/exception.js":[function(require,module,exports){
"use strict";function Exception(r,e){var o=e&&e.loc,t=void 0,s=void 0;o&&(t=o.start.line,s=o.start.column,r+=" - "+t+":"+s);for(var c=Error.prototype.constructor.call(this,r),i=0;i<errorProps.length;i++)this[errorProps[i]]=c[errorProps[i]];Error.captureStackTrace&&Error.captureStackTrace(this,Exception),o&&(this.lineNumber=t,this.column=s)}exports.__esModule=!0;var errorProps=["description","fileName","lineNumber","message","name","number","stack"];Exception.prototype=new Error,exports["default"]=Exception,module.exports=exports["default"];

},{}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/no-conflict.js":[function(require,module,exports){
(function (global){
"use strict";exports.__esModule=!0,exports["default"]=function(e){var o="undefined"!=typeof global?global:window,l=o.Handlebars;e.noConflict=function(){o.Handlebars===e&&(o.Handlebars=l)}},module.exports=exports["default"];


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/runtime.js":[function(require,module,exports){
"use strict";function checkRevision(e){var r=e&&e[0]||1,t=_COMPILER_REVISION$REVISION_CHANGES$createFrame.COMPILER_REVISION;if(r!==t){if(t>r){var a=_COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[t],n=_COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[r];throw new _Exception2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+a+") or downgrade your runtime to an older version ("+n+").")}throw new _Exception2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}}function template(e,r){function t(t,a,n){n.hash&&(a=Utils.extend({},a,n.hash)),t=r.VM.resolvePartial.call(this,t,a,n);var i=r.VM.invokePartial.call(this,t,a,n);if(null==i&&r.compile&&(n.partials[n.name]=r.compile(t,e.compilerOptions,r),i=n.partials[n.name](a,n)),null!=i){if(n.indent){for(var o=i.split("\n"),l=0,p=o.length;p>l&&(o[l]||l+1!==p);l++)o[l]=n.indent+o[l];i=o.join("\n")}return i}throw new _Exception2["default"]("The partial "+n.name+" could not be compiled when running in runtime-only mode")}function a(r){var t=void 0===arguments[1]?{}:arguments[1],i=t.data;a._setup(t),!t.partial&&e.useData&&(i=initData(r,i));var o=void 0,l=e.useBlockParams?[]:void 0;return e.useDepths&&(o=t.depths?[r].concat(t.depths):[r]),e.main.call(n,r,n.helpers,n.partials,i,l,o)}if(!r)throw new _Exception2["default"]("No environment passed to template");if(!e||!e.main)throw new _Exception2["default"]("Unknown template object: "+typeof e);r.VM.checkRevision(e.compiler);var n={strict:function(e,r){if(!(r in e))throw new _Exception2["default"]('"'+r+'" not defined in '+e);return e[r]},lookup:function(e,r){for(var t=e.length,a=0;t>a;a++)if(e[a]&&null!=e[a][r])return e[a][r]},lambda:function(e,r){return"function"==typeof e?e.call(r):e},escapeExpression:Utils.escapeExpression,invokePartial:t,fn:function(r){return e[r]},programs:[],program:function(e,r,t,a,n){var i=this.programs[e],o=this.fn(e);return r||n||a||t?i=wrapProgram(this,e,o,r,t,a,n):i||(i=this.programs[e]=wrapProgram(this,e,o)),i},data:function(e,r){for(;e&&r--;)e=e._parent;return e},merge:function(e,r){var t=e||r;return e&&r&&e!==r&&(t=Utils.extend({},r,e)),t},noop:r.VM.noop,compilerInfo:e.compiler};return a.isTop=!0,a._setup=function(t){t.partial?(n.helpers=t.helpers,n.partials=t.partials):(n.helpers=n.merge(t.helpers,r.helpers),e.usePartial&&(n.partials=n.merge(t.partials,r.partials)))},a._child=function(r,t,a,i){if(e.useBlockParams&&!a)throw new _Exception2["default"]("must pass block params");if(e.useDepths&&!i)throw new _Exception2["default"]("must pass parent depths");return wrapProgram(n,r,e[r],t,0,a,i)},a}function wrapProgram(e,r,t,a,n,i,o){function l(r){var n=void 0===arguments[1]?{}:arguments[1];return t.call(e,r,e.helpers,e.partials,n.data||a,i&&[n.blockParams].concat(i),o&&[r].concat(o))}return l.program=r,l.depth=o?o.length:0,l.blockParams=n||0,l}function resolvePartial(e,r,t){return e?e.call||t.name||(t.name=e,e=t.partials[e]):e=t.partials[t.name],e}function invokePartial(e,r,t){if(t.partial=!0,void 0===e)throw new _Exception2["default"]("The partial "+t.name+" could not be found");return e instanceof Function?e(r,t):void 0}function noop(){return""}function initData(e,r){return r&&"root"in r||(r=r?_COMPILER_REVISION$REVISION_CHANGES$createFrame.createFrame(r):{},r.root=e),r}var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}};exports.__esModule=!0,exports.checkRevision=checkRevision,exports.template=template,exports.wrapProgram=wrapProgram,exports.resolvePartial=resolvePartial,exports.invokePartial=invokePartial,exports.noop=noop;var _import=require("./utils"),Utils=_interopRequireWildcard(_import),_Exception=require("./exception"),_Exception2=_interopRequireWildcard(_Exception),_COMPILER_REVISION$REVISION_CHANGES$createFrame=require("./base");

},{"./base":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/base.js","./exception":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/safe-string.js":[function(require,module,exports){
"use strict";function SafeString(t){this.string=t}exports.__esModule=!0,SafeString.prototype.toString=SafeString.prototype.toHTML=function(){return""+this.string},exports["default"]=SafeString,module.exports=exports["default"];

},{}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars/utils.js":[function(require,module,exports){
"use strict";function escapeChar(t){return escape[t]}function extend(t){for(var r=1;r<arguments.length;r++)for(var n in arguments[r])Object.prototype.hasOwnProperty.call(arguments[r],n)&&(t[n]=arguments[r][n]);return t}function indexOf(t,r){for(var n=0,e=t.length;e>n;n++)if(t[n]===r)return n;return-1}function escapeExpression(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}return possible.test(t)?t.replace(badChars,escapeChar):t}function isEmpty(t){return t||0===t?isArray(t)&&0===t.length?!0:!1:!0}function blockParams(t,r){return t.path=r,t}function appendContextPath(t,r){return(t?t+".":"")+r}exports.__esModule=!0,exports.extend=extend,exports.indexOf=indexOf,exports.escapeExpression=escapeExpression,exports.isEmpty=isEmpty,exports.blockParams=blockParams,exports.appendContextPath=appendContextPath;var escape={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},badChars=/[&<>"'`]/g,possible=/[&<>"'`]/,toString=Object.prototype.toString;exports.toString=toString;var isFunction=function(t){return"function"==typeof t};isFunction(/x/)&&(exports.isFunction=isFunction=function(t){return"function"==typeof t&&"[object Function]"===toString.call(t)});var isFunction;exports.isFunction=isFunction;var isArray=Array.isArray||function(t){return t&&"object"==typeof t?"[object Array]"===toString.call(t):!1};exports.isArray=isArray;

},{}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/runtime.js":[function(require,module,exports){
module.exports=require("./dist/cjs/handlebars.runtime")["default"];

},{"./dist/cjs/handlebars.runtime":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/dist/cjs/handlebars.runtime.js"}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/hbsfy/runtime.js":[function(require,module,exports){
module.exports=require("handlebars/runtime")["default"];

},{"handlebars/runtime":"/Users/jakob/dev/projects/sabbat/perflife/node_modules/handlebars/runtime.js"}],"/Users/jakob/dev/projects/sabbat/perflife/node_modules/whatwg-fetch/fetch.js":[function(require,module,exports){
!function(){"use strict";function t(e){this.map={};var o=this;e instanceof t?e.forEach(function(t,e){e.forEach(function(e){o.append(t,e)})}):e&&Object.getOwnPropertyNames(e).forEach(function(t){o.append(t,e[t])})}function e(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function o(t){return new Promise(function(e,o){t.onload=function(){e(t.result)},t.onerror=function(){o(t.error)}})}function r(t){var e=new FileReader;return e.readAsArrayBuffer(t),o(e)}function n(t){var e=new FileReader;return e.readAsText(t),o(e)}function s(){return this.bodyUsed=!1,d.blob?(this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(d.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(d.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else{if(t)throw new Error("unsupported BodyInit type");this._bodyText=""}},this.blob=function(){var t=e(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(r)},this.text=function(){var t=e(this);if(t)return t;if(this._bodyBlob)return n(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):(this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(d.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else{if(t)throw new Error("unsupported BodyInit type");this._bodyText=""}},this.text=function(){var t=e(this);return t?t:Promise.resolve(this._bodyText)}),d.formData&&(this.formData=function(){return this.text().then(u)}),this.json=function(){return this.text().then(JSON.parse)},this}function i(t){var e=t.toUpperCase();return p.indexOf(e)>-1?e:t}function a(e,o){if(o=o||{},this.url=e,this.credentials=o.credentials||"omit",this.headers=new t(o.headers),this.method=i(o.method||"GET"),this.mode=o.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o.body)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o.body)}function u(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var o=t.split("="),r=o.shift().replace(/\+/g," "),n=o.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(n))}}),e}function f(e){var o=new t,r=e.getAllResponseHeaders().trim().split("\n");return r.forEach(function(t){var e=t.trim().split(":"),r=e.shift().trim(),n=e.join(":").trim();o.append(r,n)}),o}function h(t,e){e||(e={}),this._initBody(t),this.type="default",this.url=null,this.status=e.status,this.statusText=e.statusText,this.headers=e.headers,this.url=e.url||""}if(!self.fetch){t.prototype.append=function(t,e){t=t.toLowerCase();var o=this.map[t];o||(o=[],this.map[t]=o),o.push(e)},t.prototype["delete"]=function(t){delete this.map[t.toLowerCase()]},t.prototype.get=function(t){var e=this.map[t.toLowerCase()];return e?e[0]:null},t.prototype.getAll=function(t){return this.map[t.toLowerCase()]||[]},t.prototype.has=function(t){return this.map.hasOwnProperty(t.toLowerCase())},t.prototype.set=function(t,e){this.map[t.toLowerCase()]=[e]},t.prototype.forEach=function(t){var e=this;Object.getOwnPropertyNames(this.map).forEach(function(o){t(o,e.map[o])})};var d={blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self},p=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];a.prototype.fetch=function(){var t=this;return new Promise(function(e,o){function r(){return"responseURL"in n?n.responseURL:/^X-Request-URL:/m.test(n.getAllResponseHeaders())?n.getResponseHeader("X-Request-URL"):void 0}var n=new XMLHttpRequest;"cors"===t.credentials&&(n.withCredentials=!0),n.onload=function(){var t=1223===n.status?204:n.status;if(100>t||t>599)return void o(new TypeError("Network request failed"));var s={status:t,statusText:n.statusText,headers:f(n),url:r()},i="response"in n?n.response:n.responseText;e(new h(i,s))},n.onerror=function(){o(new TypeError("Network request failed"))},n.open(t.method,t.url,!0),"responseType"in n&&d.blob&&(n.responseType="blob"),t.headers.forEach(function(t,e){e.forEach(function(e){n.setRequestHeader(t,e)})}),n.send("undefined"==typeof t._bodyInit?null:t._bodyInit)})},s.call(a.prototype),s.call(h.prototype),self.Headers=t,self.Request=a,self.Response=h,self.fetch=function(t,e){return new a(t,e).fetch()},self.fetch.polyfill=!0}}();

},{}]},{},["/Users/jakob/dev/projects/sabbat/perflife/assets/js/page/index.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
